#!/bin/bash

# =============================================================================
# INSTALA√á√ÉO COMPLETA - ETL GEODATA
# =============================================================================
# Este script faz a instala√ß√£o completa do sistema ETL GEODATA:
# 1. Instala Git (se necess√°rio)
# 2. Clona reposit√≥rio do GitHub
# 3. Executa setup.sh completo
# 4. Configura credenciais automaticamente
# =============================================================================

set -e  # Parar se qualquer comando falhar

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configura√ß√µes do projeto
GITHUB_REPO="https://github.com/cmorafre/integracao_etl_geodata.git"
PROJECT_NAME="integracao_etl_geodata"
INSTALL_DIR="/tmp/etl_install"
FINAL_DIR="/opt/etl_geodata"

# =============================================================================
# FUN√á√ïES AUXILIARES
# =============================================================================

show_header() {
    echo -e "${BLUE}=================================================================="
    echo -e "üöÄ INSTALA√á√ÉO COMPLETA - ETL GEODATA"
    echo -e "=================================================================="
    echo -e "${CYAN}üì¶ Reposit√≥rio: ${GITHUB_REPO}${NC}"
    echo -e "${CYAN}üéØ Destino: ${FINAL_DIR}${NC}"
    echo -e "${BLUE}==================================================================${NC}"
    echo ""
}

log_step() {
    echo -e "${YELLOW}üìã $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${CYAN}üí° $1${NC}"
}

# Fun√ß√£o para escolher vers√£o do configure_credentials
choose_credentials_version() {
    echo ""
    echo -e "${BLUE}üîí ESCOLHA A VERS√ÉO DE CONFIGURA√á√ÉO DE CREDENCIAIS${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
    echo -e "${GREEN}1) configure_credentials.sh${NC}"
    echo -e "${CYAN}   ‚Ä¢ Vers√£o completa com teste de conex√µes${NC}"
    echo -e "${CYAN}   ‚Ä¢ Valida Oracle e PostgreSQL antes de salvar${NC}"
    echo -e "${CYAN}   ‚Ä¢ Recomendado para produ√ß√£o${NC}"
    echo ""
    echo -e "${GREEN}2) configure_credentials_simple.sh${NC}"
    echo -e "${CYAN}   ‚Ä¢ Vers√£o simplificada SEM testes de conex√£o${NC}"
    echo -e "${CYAN}   ‚Ä¢ Apenas coleta credenciais e cria .env${NC}"
    echo -e "${CYAN}   ‚Ä¢ Recomendado para desenvolvimento/teste${NC}"
    echo ""
    
    while true; do
        echo -ne "${YELLOW}Escolha a vers√£o (1 ou 2): ${NC}"
        read -r choice
        case $choice in
            1)
                echo -e "${GREEN}‚úÖ Selecionado: configure_credentials.sh (com testes)${NC}"
                return 1
                ;;
            2)
                echo -e "${GREEN}‚úÖ Selecionado: configure_credentials_simple.sh (sem testes)${NC}"
                return 2
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida! Digite 1 ou 2${NC}"
                ;;
        esac
    done
}

# =============================================================================
# IN√çCIO DA INSTALA√á√ÉO
# =============================================================================

show_header

# Verificar se √© executado com privil√©gios adequados
if [[ $EUID -eq 0 ]]; then
   log_error "Este script N√ÉO deve ser executado como root!"
   log_info "Execute como usu√°rio normal. O script pedir√° sudo quando necess√°rio."
   exit 1
fi

# =============================================================================
# 1. VERIFICA√á√ïES INICIAIS
# =============================================================================

log_step "1. Verificando sistema..."

# Verificar Ubuntu
if ! grep -q "Ubuntu" /etc/os-release 2>/dev/null; then
    log_error "Este script foi otimizado para Ubuntu"
    log_info "Pode funcionar em outras distribui√ß√µes, mas n√£o √© garantido"
    echo -ne "${YELLOW}Continuar mesmo assim? (y/n): ${NC}"
    read -r continue_anyway
    if [[ ! "$continue_anyway" =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

log_success "Sistema verificado"

# Verificar conex√£o com internet
log_step "Verificando conex√£o com internet..."
if ! ping -c 1 github.com &> /dev/null; then
    log_error "Sem conex√£o com internet ou GitHub inacess√≠vel"
    exit 1
fi

log_success "Conex√£o com internet OK"

# =============================================================================
# 2. INSTALA√á√ÉO DO GIT
# =============================================================================

log_step "2. Verificando/instalando Git..."

if command -v git &> /dev/null; then
    log_success "Git j√° instalado: $(git --version)"
else
    log_info "Git n√£o encontrado. Instalando..."
    sudo apt-get update -q
    sudo apt-get install -y git
    
    if command -v git &> /dev/null; then
        log_success "Git instalado com sucesso: $(git --version)"
    else
        log_error "Falha na instala√ß√£o do Git"
        exit 1
    fi
fi

# =============================================================================
# 3. CLONAGEM DO REPOSIT√ìRIO
# =============================================================================

log_step "3. Clonando reposit√≥rio do GitHub..."

# Limpar diret√≥rio de instala√ß√£o se existir
if [ -d "$INSTALL_DIR" ]; then
    log_info "Removendo instala√ß√£o anterior..."
    rm -rf "$INSTALL_DIR"
fi

# Criar diret√≥rio tempor√°rio
mkdir -p "$INSTALL_DIR"
cd "$INSTALL_DIR"

# Clonar reposit√≥rio
log_info "Clonando: $GITHUB_REPO"
if git clone "$GITHUB_REPO"; then
    log_success "Reposit√≥rio clonado com sucesso"
else
    log_error "Falha ao clonar reposit√≥rio"
    log_info "Verifique se o URL est√° correto: $GITHUB_REPO"
    exit 1
fi

# Verificar se o clone funcionou
if [ ! -d "$PROJECT_NAME" ]; then
    log_error "Diret√≥rio do projeto n√£o encontrado ap√≥s clone"
    exit 1
fi

cd "$PROJECT_NAME"

# Verificar arquivos essenciais
REQUIRED_FILES=("setup.sh" "main.py" "config.py")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        log_error "Arquivo essencial n√£o encontrado: $file"
        exit 1
    fi
done

log_success "Todos os arquivos essenciais encontrados"

# =============================================================================
# 4. EXECU√á√ÉO DO SETUP.SH
# =============================================================================

log_step "4. Executando instala√ß√£o da infraestrutura..."

# Tornar setup.sh execut√°vel
chmod +x setup.sh

log_info "Iniciando setup.sh..."
echo ""
echo -e "${PURPLE}========================================${NC}"
echo -e "${PURPLE}üîß EXECUTANDO SETUP DA INFRAESTRUTURA${NC}"
echo -e "${PURPLE}========================================${NC}"
echo ""

# Executar setup.sh
if ./setup.sh; then
    echo ""
    echo -e "${PURPLE}========================================${NC}"
    echo -e "${PURPLE}‚úÖ SETUP DA INFRAESTRUTURA CONCLU√çDO${NC}"  
    echo -e "${PURPLE}========================================${NC}"
    echo ""
    log_success "Infraestrutura instalada com sucesso"
else
    log_error "Falha na instala√ß√£o da infraestrutura (setup.sh)"
    exit 1
fi

# =============================================================================
# 5. CONFIGURA√á√ÉO DE CREDENCIAIS
# =============================================================================

log_step "5. Configurando credenciais..."

# Navegar para o diret√≥rio final
cd "$FINAL_DIR"

# Verificar se os scripts de credenciais existem
if [ ! -f "configure_credentials.sh" ] || [ ! -f "configure_credentials_simple.sh" ]; then
    log_error "Scripts de configura√ß√£o de credenciais n√£o encontrados em $FINAL_DIR"
    log_info "Verifique se o setup.sh copiou todos os arquivos corretamente"
    exit 1
fi

# Escolher vers√£o das credenciais
choose_credentials_version
credentials_choice=$?

echo ""
echo -e "${PURPLE}========================================${NC}"
echo -e "${PURPLE}üîí CONFIGURANDO CREDENCIAIS${NC}"
echo -e "${PURPLE}========================================${NC}"
echo ""

# Executar script de credenciais escolhido
if [ $credentials_choice -eq 1 ]; then
    log_info "Executando configure_credentials.sh (com testes de conex√£o)..."
    if ./configure_credentials.sh; then
        log_success "Credenciais configuradas com sucesso (com testes)"
    else
        log_error "Falha na configura√ß√£o das credenciais (vers√£o com testes)"
        log_info "Voc√™ pode tentar novamente executando: cd $FINAL_DIR && ./configure_credentials.sh"
        exit 1
    fi
else
    log_info "Executando configure_credentials_simple.sh (sem testes de conex√£o)..."
    if ./configure_credentials_simple.sh; then
        log_success "Credenciais configuradas com sucesso (sem testes)"
        echo ""
        log_info "‚ö†Ô∏è  Lembre-se de testar as conex√µes posteriormente com:"
        echo -e "${CYAN}cd $FINAL_DIR && source venv/bin/activate && python test_connections.py${NC}"
    else
        log_error "Falha na configura√ß√£o das credenciais (vers√£o simples)"
        log_info "Voc√™ pode tentar novamente executando: cd $FINAL_DIR && ./configure_credentials_simple.sh"
        exit 1
    fi
fi

# =============================================================================
# 6. LIMPEZA E FINALIZA√á√ÉO
# =============================================================================

log_step "6. Finalizando instala√ß√£o..."

# Remover diret√≥rio tempor√°rio
cd /
rm -rf "$INSTALL_DIR"
log_success "Arquivos tempor√°rios removidos"

# =============================================================================
# 7. INFORMA√á√ïES FINAIS
# =============================================================================

echo ""
echo -e "${GREEN}üéâ=================================================================="
echo -e "üéâ INSTALA√á√ÉO COMPLETA FINALIZADA COM SUCESSO!"
echo -e "üéâ==================================================================${NC}"
echo ""

echo -e "${YELLOW}üìã RESUMO DA INSTALA√á√ÉO:${NC}"
echo -e "${GREEN}‚úÖ Git instalado/verificado${NC}"
echo -e "${GREEN}‚úÖ Reposit√≥rio clonado de: ${GITHUB_REPO}${NC}"
echo -e "${GREEN}‚úÖ Infraestrutura ETL instalada${NC}"
echo -e "${GREEN}‚úÖ Credenciais configuradas${NC}"
echo -e "${GREEN}‚úÖ Sistema pronto para uso${NC}"
echo ""

echo -e "${YELLOW}üìÅ LOCALIZA√á√ÉO DOS ARQUIVOS:${NC}"
echo -e "${CYAN}‚Ä¢ Projeto: ${FINAL_DIR}${NC}"
echo -e "${CYAN}‚Ä¢ Configura√ß√µes: ${FINAL_DIR}/.env${NC}"
echo -e "${CYAN}‚Ä¢ Logs: ${FINAL_DIR}/logs/${NC}"
echo -e "${CYAN}‚Ä¢ Scripts SQL: ${FINAL_DIR}/sql_scripts/${NC}"
echo ""

echo -e "${YELLOW}üöÄ PR√ìXIMOS PASSOS:${NC}"
echo -e "1. Testar conex√µes: ${CYAN}cd ${FINAL_DIR} && source venv/bin/activate && python test_connections.py${NC}"
echo -e "2. Executar ETL teste: ${CYAN}cd ${FINAL_DIR} && python main.py --dry-run${NC}"
echo -e "3. Executar ETL completo: ${CYAN}cd ${FINAL_DIR} && python main.py${NC}"
echo -e "4. Configurar agendamento: ${CYAN}crontab -e${NC} (adicione: 0 2 * * * ${FINAL_DIR}/etl_cron.sh)"
echo ""

echo -e "${YELLOW}üîß COMANDOS √öTEIS:${NC}"
echo -e "‚Ä¢ Ativar ambiente: ${CYAN}cd ${FINAL_DIR} && source venv/bin/activate${NC}"
echo -e "‚Ä¢ Ver logs: ${CYAN}tail -f ${FINAL_DIR}/logs/etl_geodata.log${NC}"
echo -e "‚Ä¢ Reconfigurar credenciais: ${CYAN}cd ${FINAL_DIR} && ./configure_credentials.sh${NC}"
echo -e "‚Ä¢ Status do cron: ${CYAN}crontab -l${NC}"
echo ""

echo -e "${GREEN}üéØ Sistema ETL GEODATA instalado e configurado!${NC}"
echo -e "${BLUE}üìñ Consulte o README.md para documenta√ß√£o completa${NC}"