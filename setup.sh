#!/bin/bash

# =============================================================================
# SCRIPT DE SETUP - ETL GEODATA
# =============================================================================
# Este script configura o ambiente completo para o ETL GEODATA no Ubuntu
# Execute com: chmod +x setup.sh && ./setup.sh
# =============================================================================

set -e  # Parar se qualquer comando falhar

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=================================="
echo -e "üöÄ SETUP ETL GEODATA"
echo -e "==================================${NC}"

# =============================================================================
# 1. VERIFICA√á√ïES INICIAIS
# =============================================================================

echo -e "\n${YELLOW}üìã 1. Verificando sistema...${NC}"

# Verificar se √© Ubuntu
if ! grep -q "Ubuntu" /etc/os-release 2>/dev/null; then
    echo -e "${RED}‚ùå Este script foi feito para Ubuntu. Execute manualmente em outros sistemas.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Sistema Ubuntu detectado${NC}"

# Verificar Python 3.8+
PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
echo -e "üêç Python vers√£o: $PYTHON_VERSION"

if ! python3 -c 'import sys; exit(0 if sys.version_info >= (3,8) else 1)' 2>/dev/null; then
    echo -e "${RED}‚ùå Python 3.8+ requerido. Vers√£o atual: $PYTHON_VERSION${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Vers√£o Python OK${NC}"

# =============================================================================
# 2. INSTALA√á√ÉO DE DEPEND√äNCIAS DO SISTEMA
# =============================================================================

echo -e "\n${YELLOW}üì¶ 2. Instalando depend√™ncias do sistema...${NC}"

sudo apt-get update -q

# Pacotes essenciais
sudo apt-get install -y \
    python3-pip \
    python3-venv \
    python3-dev \
    libpq-dev \
    libaio1t64 \
    unzip \
    wget \
    curl \
    cron

echo -e "${GREEN}‚úÖ Depend√™ncias do sistema instaladas${NC}"

# =============================================================================
# 3. ORACLE INSTANT CLIENT
# =============================================================================

echo -e "\n${YELLOW}üóÑÔ∏è  3. Configurando Oracle Instant Client...${NC}"

# Verificar se j√° est√° instalado
if command -v sqlplus &> /dev/null; then
    echo -e "${GREEN}‚úÖ Oracle Instant Client j√° instalado${NC}"
else
    echo -e "üì• Instalando Oracle Instant Client automaticamente..."
    
    # Limpar instala√ß√£o anterior se existir
    if [ -d "/opt/oracle/instantclient_19_1" ]; then
        echo -e "üßπ Removendo instala√ß√£o anterior do Oracle Client..."
        sudo rm -rf /opt/oracle/instantclient_19_1
    fi
    
    # Criar/recriar diret√≥rio Oracle limpo
    sudo mkdir -p /opt/oracle
    
    # Criar diret√≥rio tempor√°rio
    TEMP_DIR="/tmp/oracle_setup"
    rm -rf $TEMP_DIR  # Limpar se existir
    mkdir -p $TEMP_DIR
    cd $TEMP_DIR
    
    # URLs diretas para Oracle Instant Client (sem necessidade de login Oracle)
    # Usando vers√£o 19.x que √© mais est√°vel e amplamente suportada
    ORACLE_VERSION="19.16.0.0.0"
    BASE_URL="https://download.oracle.com/otn_software/linux/instantclient/1916000"
    
    echo -e "üì• Baixando Oracle Instant Client Basic..."
    if ! wget -q --show-progress "${BASE_URL}/instantclient-basic-linux.x64-${ORACLE_VERSION}dbru.zip" -O instantclient-basic.zip; then
        echo -e "${RED}‚ùå Falha no download do Oracle Client Basic${NC}"
        exit 1
    fi
    
    echo -e "üì• Baixando Oracle Instant Client SQL*Plus..."
    if ! wget -q --show-progress "${BASE_URL}/instantclient-sqlplus-linux.x64-${ORACLE_VERSION}dbru.zip" -O instantclient-sqlplus.zip; then
        echo -e "${RED}‚ùå Falha no download do Oracle Client SQL*Plus${NC}"
        exit 1
    fi
    
    # Verificar se downloads foram bem-sucedidos
    if [[ -f "instantclient-basic.zip" && -f "instantclient-sqlplus.zip" ]]; then
        echo -e "üìÇ Extraindo arquivos..."
        sudo unzip -q instantclient-basic.zip -d /opt/oracle/
        sudo unzip -q instantclient-sqlplus.zip -d /opt/oracle/
        
        # Encontrar o diret√≥rio criado pelo unzip (pode variar o nome)
        EXTRACTED_DIR=$(sudo find /opt/oracle -maxdepth 1 -name "instantclient_*" -type d | head -1)
        
        if [ -n "$EXTRACTED_DIR" ] && [ "$EXTRACTED_DIR" != "/opt/oracle/instantclient_19_1" ]; then
            echo -e "üîÑ Renomeando diret√≥rio Oracle Client..."
            sudo mv "$EXTRACTED_DIR" /opt/oracle/instantclient_19_1/
        elif [ -z "$EXTRACTED_DIR" ]; then
            echo -e "${RED}‚ùå Erro: Diret√≥rio do Oracle Client n√£o encontrado ap√≥s extra√ß√£o${NC}"
            exit 1
        else
            echo -e "‚úÖ Diret√≥rio Oracle Client j√° est√° no local correto"
        fi
        
        # Configurar vari√°veis de ambiente (evitando duplica√ß√£o)
        echo -e "‚öôÔ∏è  Configurando vari√°veis de ambiente..."
        
        # Remover configura√ß√µes Oracle antigas do .bashrc se existirem
        grep -v "Oracle Instant Client\|instantclient_19_1\|ORACLE_HOME" ~/.bashrc > ~/.bashrc.tmp || true
        mv ~/.bashrc.tmp ~/.bashrc
        
        # Adicionar novas configura√ß√µes
        echo "# Oracle Instant Client" >> ~/.bashrc
        echo "export LD_LIBRARY_PATH=/opt/oracle/instantclient_19_1:\$LD_LIBRARY_PATH" >> ~/.bashrc
        echo "export PATH=/opt/oracle/instantclient_19_1:\$PATH" >> ~/.bashrc
        echo "export ORACLE_HOME=/opt/oracle/instantclient_19_1" >> ~/.bashrc
        
        # Aplicar configura√ß√µes na sess√£o atual
        export LD_LIBRARY_PATH=/opt/oracle/instantclient_19_1:$LD_LIBRARY_PATH
        export PATH=/opt/oracle/instantclient_19_1:$PATH
        export ORACLE_HOME=/opt/oracle/instantclient_19_1
        
        # Verificar se arquivos foram instalados corretamente
        if [ -f "/opt/oracle/instantclient_19_1/libclntsh.so.19.1" ] && [ -f "/opt/oracle/instantclient_19_1/sqlplus" ]; then
            echo -e "‚úÖ Arquivos Oracle Client encontrados"
            
            # Criar diret√≥rio lib e links simb√≥licos para compatibilidade com cx_Oracle
            echo -e "üîó Criando links simb√≥licos para compatibilidade..."
            sudo mkdir -p /opt/oracle/instantclient_19_1/lib
            sudo ln -sf /opt/oracle/instantclient_19_1/libclntsh.so.19.1 /opt/oracle/instantclient_19_1/lib/libclntsh.so
            sudo ln -sf /opt/oracle/instantclient_19_1/libclntsh.so.19.1 /opt/oracle/instantclient_19_1/libclntsh.so
            sudo ln -sf /opt/oracle/instantclient_19_1/libocci.so.19.1 /opt/oracle/instantclient_19_1/lib/libocci.so
            sudo ln -sf /opt/oracle/instantclient_19_1/libocci.so.19.1 /opt/oracle/instantclient_19_1/libocci.so
            
            # Ajustar permiss√µes
            sudo chmod +x /opt/oracle/instantclient_19_1/sqlplus
            
            # Teste de instala√ß√£o
            if /opt/oracle/instantclient_19_1/sqlplus -v &> /dev/null; then
                echo -e "${GREEN}‚úÖ Oracle Instant Client instalado e configurado com sucesso${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Oracle Client instalado, mas pode precisar reiniciar o terminal${NC}"
                echo -e "${BLUE}üí° Execute: source ~/.bashrc${NC}"
            fi
        else
            echo -e "${RED}‚ùå Erro: Arquivos essenciais do Oracle Client n√£o encontrados${NC}"
            exit 1
        fi
        
        # Limpar arquivos tempor√°rios
        cd /
        rm -rf "$TEMP_DIR"
        
    else
        echo -e "${RED}‚ùå Falha no download do Oracle Client. Tentando instala√ß√£o manual...${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Configure Oracle Client manualmente:${NC}"
        echo -e "1. Acesse: https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html"
        echo -e "2. Baixe: Basic Package e SQL*Plus Package"
        echo -e "3. Execute os comandos abaixo:"
        echo -e "sudo mkdir -p /opt/oracle"
        echo -e "sudo unzip instantclient-basic-*.zip -d /opt/oracle/"
        echo -e "sudo unzip instantclient-sqlplus-*.zip -d /opt/oracle/"
        echo -e "echo 'export LD_LIBRARY_PATH=/opt/oracle/instantclient_*:\$LD_LIBRARY_PATH' >> ~/.bashrc"
        echo -e "echo 'export PATH=/opt/oracle/instantclient_*:\$PATH' >> ~/.bashrc"
        echo -e "source ~/.bashrc"
        
        echo -e "\n${YELLOW}‚è∏Ô∏è  Pause: Configure Oracle Client manualmente e depois continue${NC}"
        read -p "Pressione Enter quando Oracle Client estiver configurado..."
    fi
fi

# =============================================================================
# 4. AMBIENTE VIRTUAL PYTHON
# =============================================================================

echo -e "\n${YELLOW}üêç 4. Criando ambiente virtual Python...${NC}"

# Diret√≥rio do projeto
PROJECT_DIR="/opt/etl_geodata"
VENV_DIR="$PROJECT_DIR/venv"

# Criar diret√≥rio do projeto
sudo mkdir -p $PROJECT_DIR
sudo chown $USER:$USER $PROJECT_DIR
cd $PROJECT_DIR

# Criar ambiente virtual
if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv venv
    echo -e "${GREEN}‚úÖ Ambiente virtual criado${NC}"
else
    echo -e "${GREEN}‚úÖ Ambiente virtual j√° existe${NC}"
fi

# Ativar ambiente virtual
source venv/bin/activate

# Upgrade pip
pip install --upgrade pip

echo -e "${GREEN}‚úÖ Ambiente virtual configurado${NC}"

# =============================================================================
# 5. INSTALA√á√ÉO DE PACOTES PYTHON
# =============================================================================

echo -e "\n${YELLOW}üìö 5. Instalando pacotes Python...${NC}"

# Instalar do requirements.txt se existir, sen√£o instalar manualmente
if [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
else
    # Instalar pacotes essenciais
    pip install pandas>=1.5.0
    pip install cx_Oracle>=8.3.0
    pip install psycopg2-binary>=2.9.0
    pip install SQLAlchemy>=1.4.0
    pip install python-dateutil>=2.8.0
fi

echo -e "${GREEN}‚úÖ Pacotes Python instalados${NC}"

# =============================================================================
# 6. ESTRUTURA DE DIRET√ìRIOS
# =============================================================================

echo -e "\n${YELLOW}üìÅ 6. Criando estrutura de diret√≥rios...${NC}"

mkdir -p logs
mkdir -p backup
mkdir -p temp
mkdir -p sql_scripts

# Ajustar permiss√µes
chmod 755 logs backup temp sql_scripts

echo -e "${GREEN}‚úÖ Estrutura de diret√≥rios criada${NC}"

# =============================================================================
# 7. CONFIGURA√á√ÉO DO CRON
# =============================================================================

echo -e "\n${YELLOW}‚è∞ 7. Configurando agendamento (cron)...${NC}"

# Script wrapper para cron
cat > etl_cron.sh << 'EOF'
#!/bin/bash
# Wrapper script para execu√ß√£o via cron

# Definir vari√°veis de ambiente
export PATH="/opt/etl_geodata/venv/bin:$PATH"
export LD_LIBRARY_PATH="/opt/oracle/instantclient_19_1:$LD_LIBRARY_PATH"
export ORACLE_HOME="/opt/oracle/instantclient_19_1"

# Navegar para diret√≥rio do projeto
cd /opt/etl_geodata

# Ativar ambiente virtual
source venv/bin/activate

# Executar ETL
python main.py >> logs/cron.log 2>&1

# Log de execu√ß√£o
echo "$(date): ETL executado via cron" >> logs/cron_history.log
EOF

chmod +x etl_cron.sh

echo -e "${BLUE}üìã Para agendar execu√ß√£o di√°ria √†s 02:00, execute:${NC}"
echo -e "crontab -e"
echo -e "${BLUE}Adicione a linha:${NC}"
echo -e "0 2 * * * /opt/etl_geodata/etl_cron.sh"

echo -e "${GREEN}‚úÖ Script de cron criado${NC}"

# =============================================================================
# 8. CONFIGURA√á√ÉO DE LOGS
# =============================================================================

echo -e "\n${YELLOW}üìù 8. Configurando logrotate...${NC}"

# Configura√ß√£o do logrotate
sudo tee /etc/logrotate.d/etl-geodata > /dev/null << EOF
/opt/etl_geodata/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
    su $USER $USER
}
EOF

echo -e "${GREEN}‚úÖ Logrotate configurado${NC}"

# =============================================================================
# 9. TESTES B√ÅSICOS DE PYTHON
# =============================================================================

echo -e "\n${YELLOW}üß™ 9. Testando imports Python...${NC}"

# Testar imports Python
python -c "
try:
    import pandas, cx_Oracle, psycopg2, sqlalchemy
    print('‚úÖ Todos os imports Python OK')
except ImportError as e:
    print(f'‚ùå Erro no import: {e}')
    exit(1)
"

echo -e "${GREEN}‚úÖ Testes b√°sicos conclu√≠dos${NC}"

# =============================================================================
# 10. C√ìPIA DOS ARQUIVOS PYTHON E SQL
# =============================================================================

echo -e "\n${YELLOW}üìã 10. Copiando arquivos do projeto...${NC}"

# Detectar diret√≥rio de origem do projeto
# O script pode ser executado de diferentes locais ap√≥s git clone
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo -e "üìç Diret√≥rio do script: $SCRIPT_DIR"

# Poss√≠veis locais onde os arquivos podem estar
POSSIBLE_DIRS=(
    "$SCRIPT_DIR"                                    # Mesmo diret√≥rio do setup.sh
    "$(pwd)"                                         # Diret√≥rio atual
    "$HOME/integracao_etl_geodata"                   # Home do usu√°rio
    "/tmp/integracao_etl_geodata"                    # Tempor√°rio
    "/tmp/etl_install/integracao_etl_geodata"        # Diret√≥rio usado pelo install_full.sh
)

SOURCE_DIR=""
SQL_SOURCE_DIR=""

# Procurar diret√≥rio com os arquivos do projeto
for dir in "${POSSIBLE_DIRS[@]}"; do
    if [[ -f "$dir/main.py" && -f "$dir/config.py" && -d "$dir/sqls" ]]; then
        SOURCE_DIR="$dir"
        SQL_SOURCE_DIR="$dir/sqls"
        echo -e "üìÅ Arquivos do projeto encontrados em: $SOURCE_DIR"
        break
    fi
done

if [ -z "$SOURCE_DIR" ]; then
    echo -e "${RED}‚ùå N√£o foi poss√≠vel encontrar os arquivos do projeto!${NC}"
    echo -e "${YELLOW}üí° Certifique-se de que os arquivos est√£o no mesmo diret√≥rio do setup.sh${NC}"
    echo -e "${BLUE}üìã Para copiar manualmente:${NC}"
    echo -e "cp /caminho/do/projeto/*.py /opt/etl_geodata/"
    echo -e "cp /caminho/do/projeto/requirements.txt /opt/etl_geodata/"
    echo -e "cp /caminho/do/projeto/sqls/*.sql /opt/etl_geodata/sql_scripts/"
    exit 1
fi

# Copiar arquivos Python principais
echo -e "üêç Copiando arquivos Python..."
PYTHON_FILES=("main.py" "config.py" "etl_functions.py" "test_connections.py")
for file in "${PYTHON_FILES[@]}"; do
    if [ -f "$SOURCE_DIR/$file" ]; then
        cp "$SOURCE_DIR/$file" .
        echo -e "${GREEN}‚úÖ $file copiado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $file n√£o encontrado${NC}"
    fi
done

# Copiar requirements.txt se existir
if [ -f "$SOURCE_DIR/requirements.txt" ]; then
    cp "$SOURCE_DIR/requirements.txt" .
    echo -e "${GREEN}‚úÖ requirements.txt copiado${NC}"
fi

# Copiar arquivos SQL
if [ -d "$SQL_SOURCE_DIR" ]; then
    echo -e "üìã Copiando arquivos SQL..."
    
    if ls "$SQL_SOURCE_DIR"/*.sql 1> /dev/null 2>&1; then
        cp "$SQL_SOURCE_DIR"/*.sql sql_scripts/
        SQL_COUNT=$(ls -1 "$SQL_SOURCE_DIR"/*.sql | wc -l)
        echo -e "${GREEN}‚úÖ ${SQL_COUNT} arquivos SQL copiados para /opt/etl_geodata/sql_scripts/${NC}"
        
        # Listar arquivos copiados
        echo -e "${BLUE}üìã Arquivos SQL copiados:${NC}"
        for sql_file in "$SQL_SOURCE_DIR"/*.sql; do
            filename=$(basename "$sql_file")
            echo -e "   ‚Ä¢ $filename"
        done
        
        # Ajustar permiss√µes
        chmod 644 sql_scripts/*.sql
        
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum arquivo .sql encontrado em $SQL_SOURCE_DIR${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pasta 'sqls' n√£o encontrada${NC}"
fi

# Copiar scripts de configura√ß√£o de credenciais
echo -e "üîí Copiando scripts de configura√ß√£o de credenciais..."

if [ -f "$SOURCE_DIR/configure_credentials.sh" ]; then
    cp "$SOURCE_DIR/configure_credentials.sh" .
    chmod +x configure_credentials.sh
    echo -e "${GREEN}‚úÖ configure_credentials.sh copiado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  configure_credentials.sh n√£o encontrado${NC}"
fi

if [ -f "$SOURCE_DIR/configure_credentials_simple.sh" ]; then
    cp "$SOURCE_DIR/configure_credentials_simple.sh" .
    chmod +x configure_credentials_simple.sh
    echo -e "${GREEN}‚úÖ configure_credentials_simple.sh copiado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  configure_credentials_simple.sh n√£o encontrado${NC}"
fi

echo -e "${BLUE}üîí Configura√ß√£o de credenciais ser√° feita na pr√≥xima etapa${NC}"

# =============================================================================
# 11. VALIDA√á√ÉO FINAL
# =============================================================================

echo -e "\n${YELLOW}‚úÖ 11. Valida√ß√£o final do setup...${NC}"

# Verificar se todos os arquivos necess√°rios est√£o no lugar
REQUIRED_FILES=("main.py" "config.py" "etl_functions.py" "test_connections.py")
ALL_FILES_OK=true

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file presente${NC}"
    else
        echo -e "${RED}‚ùå $file n√£o encontrado${NC}"
        ALL_FILES_OK=false
    fi
done

# Verificar scripts de credenciais (pelo menos um deve estar presente)
if [ -f "configure_credentials.sh" ] || [ -f "configure_credentials_simple.sh" ]; then
    if [ -f "configure_credentials.sh" ]; then
        echo -e "${GREEN}‚úÖ configure_credentials.sh presente${NC}"
    fi
    if [ -f "configure_credentials_simple.sh" ]; then
        echo -e "${GREEN}‚úÖ configure_credentials_simple.sh presente${NC}"
    fi
else
    echo -e "${RED}‚ùå Nenhum script de configura√ß√£o de credenciais encontrado${NC}"
    ALL_FILES_OK=false
fi

# Verificar se h√° arquivos SQL
if ls sql_scripts/*.sql 1> /dev/null 2>&1; then
    SQL_COUNT=$(ls -1 sql_scripts/*.sql | wc -l)
    echo -e "${GREEN}‚úÖ ${SQL_COUNT} arquivos SQL dispon√≠veis${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Nenhum arquivo SQL encontrado${NC}"
fi

# Verificar estrutura de diret√≥rios
REQUIRED_DIRS=("logs" "backup" "temp" "sql_scripts" "venv")
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úÖ Diret√≥rio $dir criado${NC}"
    else
        echo -e "${RED}‚ùå Diret√≥rio $dir n√£o encontrado${NC}"
    fi
done

# Status final
if [ "$ALL_FILES_OK" = true ]; then
    echo -e "\n${GREEN}üéâ VALIDA√á√ÉO COMPLETA: Sistema est√° pronto!${NC}"
else
    echo -e "\n${YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: Alguns arquivos est√£o faltando. Verifique as mensagens acima.${NC}"
fi

# =============================================================================
# 12. INFORMA√á√ïES FINAIS
# =============================================================================

echo -e "\n${BLUE}=================================="
echo -e "üéâ SETUP CONCLU√çDO!"
echo -e "==================================${NC}"

echo -e "\n${YELLOW}üìã PR√ìXIMOS PASSOS:${NC}"
echo -e "1. ${GREEN}‚úÖ Infraestrutura instalada e configurada${NC}"
echo -e "2. ${YELLOW}üîí CONFIGURE AS CREDENCIAIS:${NC} cd $PROJECT_DIR && ./configure_credentials.sh"
echo -e "3. Execute teste de conex√£o: python test_connections.py"
echo -e "4. Execute teste com arquivo espec√≠fico: python main.py --file nome_arquivo.sql"
echo -e "5. Execute ETL completo: python main.py"
echo -e "6. Configure cron para execu√ß√£o di√°ria: crontab -e"

echo -e "\n${YELLOW}üîß COMANDOS √öTEIS:${NC}"
echo -e "‚Ä¢ Ativar ambiente virtual: cd $PROJECT_DIR && source venv/bin/activate"
echo -e "‚Ä¢ Executar ETL: cd $PROJECT_DIR && python main.py"
echo -e "‚Ä¢ Ver logs: tail -f $PROJECT_DIR/logs/etl_geodata.log"
echo -e "‚Ä¢ Teste dry-run: python main.py --dry-run"

echo -e "\n${YELLOW}‚öôÔ∏è  CONFIGURA√á√ïES:${NC}"
echo -e "‚Ä¢ Diret√≥rio projeto: $PROJECT_DIR"
echo -e "‚Ä¢ Logs: $PROJECT_DIR/logs/"
echo -e "‚Ä¢ Script cron: $PROJECT_DIR/etl_cron.sh"
echo -e "‚Ä¢ Ambiente virtual: $PROJECT_DIR/venv/"

echo -e "\n${YELLOW}‚ú® FASE 1 CONCLU√çDA - Infraestrutura Instalada!${NC}"

# Desativar ambiente virtual
deactivate

echo -e "\n${BLUE}üí° Para continuar (FASE 2 - Credenciais):${NC}"
echo -e "cd $PROJECT_DIR"
echo -e "./configure_credentials.sh"