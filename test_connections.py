#!/usr/bin/env python3
"""
Arquivo para testar conex√µes com Oracle e PostgreSQL
Execute este arquivo antes do ETL principal para validar as conex√µes
"""

import cx_Oracle
import psycopg2
import pandas as pd
from datetime import datetime
import sys

def test_oracle_connection():
    """Testa conex√£o com Oracle"""
    print("=" * 60)
    print("TESTANDO CONEX√ÉO COM ORACLE")
    print("=" * 60)
    
    try:
        # Configura√ß√µes Oracle
        oracle_host = "192.168.10.243"
        oracle_port = 1521
        oracle_service = "ORCL"
        oracle_user = "GEODATA"
        oracle_password = "GEo,D4tA0525#!"
        
        # String de conex√£o
        dsn = cx_Oracle.makedsn(oracle_host, oracle_port, service_name=oracle_service)
        print(f"üì° Tentando conectar em: {oracle_host}:{oracle_port}/{oracle_service}")
        print(f"üë§ Usu√°rio: {oracle_user}")
        
        # Conectar
        connection = cx_Oracle.connect(user=oracle_user, password=oracle_password, dsn=dsn)
        cursor = connection.cursor()
        
        # Teste b√°sico
        cursor.execute("SELECT SYSDATE FROM DUAL")
        result = cursor.fetchone()
        print(f"‚úÖ Conex√£o Oracle OK!")
        print(f"üïê Data/hora do servidor: {result[0]}")
        
        # Teste de schema
        cursor.execute("SELECT COUNT(*) FROM USER_TABLES")
        table_count = cursor.fetchone()[0]
        print(f"üìä Tabelas dispon√≠veis no schema GEODATA: {table_count}")
        
        # Listar algumas tabelas
        cursor.execute("SELECT TABLE_NAME FROM USER_TABLES WHERE ROWNUM <= 5")
        tables = cursor.fetchall()
        print("üìã Primeiras 5 tabelas:")
        for table in tables:
            print(f"   ‚Ä¢ {table[0]}")
        
        cursor.close()
        connection.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na conex√£o Oracle: {e}")
        return False

def test_postgresql_connection():
    """Testa conex√£o com PostgreSQL"""
    print("\n" + "=" * 60)
    print("TESTANDO CONEX√ÉO COM POSTGRESQL")
    print("=" * 60)
    
    try:
        # Configura√ß√µes PostgreSQL
        pg_host = "localhost"
        pg_port = 5432
        pg_database = "postgres"
        pg_user = "postgres"
        pg_password = "geo@2025!@"
        
        print(f"üì° Tentando conectar em: {pg_host}:{pg_port}/{pg_database}")
        print(f"üë§ Usu√°rio: {pg_user}")
        
        # Conectar
        connection = psycopg2.connect(
            host=pg_host,
            port=pg_port,
            database=pg_database,
            user=pg_user,
            password=pg_password
        )
        
        cursor = connection.cursor()
        
        # Teste b√°sico
        cursor.execute("SELECT NOW()")
        result = cursor.fetchone()
        print(f"‚úÖ Conex√£o PostgreSQL OK!")
        print(f"üïê Data/hora do servidor: {result[0]}")
        
        # Teste de vers√£o
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        print(f"üêò Vers√£o PostgreSQL: {version.split(',')[0]}")
        
        # Teste de permiss√µes - criar tabela teste
        test_table_sql = """
        CREATE TABLE IF NOT EXISTS teste_etl (
            id SERIAL PRIMARY KEY,
            nome VARCHAR(100),
            data_teste TIMESTAMP DEFAULT NOW()
        )
        """
        cursor.execute(test_table_sql)
        
        # Inserir dados teste
        cursor.execute("INSERT INTO teste_etl (nome) VALUES ('Teste ETL')")
        
        # Verificar inser√ß√£o
        cursor.execute("SELECT COUNT(*) FROM teste_etl")
        count = cursor.fetchone()[0]
        print(f"üìù Teste de escrita OK - Registros na tabela teste: {count}")
        
        # Limpar teste
        cursor.execute("DROP TABLE teste_etl")
        
        connection.commit()
        cursor.close()
        connection.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na conex√£o PostgreSQL: {e}")
        return False

def test_pandas_integration():
    """Testa integra√ß√£o com pandas"""
    print("\n" + "=" * 60)
    print("TESTANDO INTEGRA√á√ÉO COM PANDAS")
    print("=" * 60)
    
    try:
        # Teste Oracle com pandas
        oracle_dsn = cx_Oracle.makedsn("192.168.10.243", 1521, service_name="ORCL")
        oracle_conn_str = f"oracle+cx_oracle://GEODATA:GEo,D4tA0525#!@{oracle_dsn}"
        
        df_oracle = pd.read_sql("SELECT SYSDATE as data_atual FROM DUAL", oracle_conn_str)
        print(f"‚úÖ Pandas + Oracle OK! Data: {df_oracle.iloc[0]['data_atual']}")
        
        # Teste PostgreSQL com pandas
        pg_conn_str = "postgresql://postgres:geo@2025!@@localhost:5432/postgres"
        df_pg = pd.read_sql("SELECT NOW() as data_atual", pg_conn_str)
        print(f"‚úÖ Pandas + PostgreSQL OK! Data: {df_pg.iloc[0]['data_atual']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na integra√ß√£o Pandas: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTES DE CONEX√ÉO ETL GEODATA")
    print(f"‚è∞ Data/hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    oracle_ok = test_oracle_connection()
    pg_ok = test_postgresql_connection()
    pandas_ok = test_pandas_integration()
    
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES")
    print("=" * 60)
    print(f"Oracle Connection:     {'‚úÖ OK' if oracle_ok else '‚ùå FALHOU'}")
    print(f"PostgreSQL Connection: {'‚úÖ OK' if pg_ok else '‚ùå FALHOU'}")
    print(f"Pandas Integration:    {'‚úÖ OK' if pandas_ok else '‚ùå FALHOU'}")
    
    if oracle_ok and pg_ok and pandas_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM! Sistema pronto para ETL.")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM! Verifique as conex√µes antes de executar o ETL.")
        sys.exit(1)

if __name__ == "__main__":
    main()
